include "spells_basic.bhs"

SpellType spell_type;


int safe_function sf_get_repair_cost (Object the_caster, String resource_name, int health_percent)
{
  GoodType good_type = (GoodType)resource_name;
  Leader the_leader = get_object_leader(the_caster);
  
  //if(!tribe_can_type(good_type)) return 0;
  
  int repair_cost_ratio = get_spell_type_data(spell_type, 1, the_leader);
  if ((resource_name == "Timonium") || (resource_name == "Wealth") || (resource_name == "Energy")) {
    int percent_damage = (100 - health_percent);
    if (percent_damage == 0) {
      return 0;
    }
    ObjectType caster_object_type = get_object_type(the_caster);
    int normal_cost = 0;
    if (valid_build(the_caster)) {
      Build the_build = get_object_build(the_caster);
      if (is_city(the_build)) {
        // cities use their entire building cost to compute repair cost
        normal_cost = get_city_cost(the_build, good_type);
      }
    }
    if (normal_cost == 0) {
      // if this wasn't a city, just get the base type cost
      normal_cost = get_object_type_base_cost(caster_object_type, good_type, the_leader);
    }
    normal_cost = normal_cost * repair_cost_ratio / 100;
    int repair_cost = (normal_cost * percent_damage) / 100;

    if (repair_cost <= 0 && normal_cost > 0) {
      repair_cost = 1;
    }
    return repair_cost;
  }
  return 0;
  
}


int function sf_pay_cost (Object the_target, Spell the_spell, String resource_name, float health_percent, int org_health, int data_index)
{
  Leader the_leader  = get_object_leader(the_target);
  GoodType good_type = (GoodType)resource_name;
  int cost = 0;
  int amount_avail = get_good(the_leader, good_type);

  if (resource_name != "Timonium")  return 0;

  if (health_percent < 100) {
    
    //int cost_total  = sf_get_repair_cost(the_target, resource_name, org_health);
    int cost_total = sf_get_repair_cost(the_target, "Timonium", org_health) + sf_get_repair_cost(the_target, "Wealth", org_health) + sf_get_repair_cost(the_target, "Energy", org_health);
    int iteration     = get_spell_data_data(the_spell, data_index) + 1;  // number of frames since last paid
    float temp     = (float)cost_total / spell_duration(the_spell);     // duration is in frames, so cost per frame
    cost            = (int)(temp * iteration);
    
    if (cost > 0 && cost <= amount_avail) {
      //== pay
      take_good(the_leader, good_type, cost);
      
      //== reset our frame counter
      set_spell_data_data(the_spell, data_index, 0);
      
      //== save off total spent of this resource.
      int total_spent = get_spell_data_data(the_spell, data_index+3) + cost;
      set_spell_data_data(the_spell, data_index+3, total_spent);
    } else {
      //== not enough for 1, save off the number of frames since last paid.
      set_spell_data_data(the_spell, data_index, iteration);
    }
  } else {
    //== at 100%, make sure to pay what is still owed.
    int cost_total  = sf_get_repair_cost(the_target, resource_name, org_health);
    int total_spent = get_spell_data_data(the_spell, data_index+3);
    
    if (total_spent != cost_total) {
      cost = cost_total - total_spent;
    }
    
    if (amount_avail < cost) {
      cost = amount_avail;
    }
    take_good(the_leader, good_type, cost);
  }
  
  return cost;
    
}



void game_callback on_game_started (int num_players) {
  spell_type = "Repair";
}


int safe_callback spell_can_cast_ever (Object the_caster)
{
  if (!valid_build(the_caster)) {
    return SPELL_CANT_CAST;
  }

  return SPELL_CAN_CAST;
}



Text safe_callback spell_can_cast_now (Object the_caster)
{
  if (!valid_build(the_caster)) {
    return "Only buildings can be repaired.";
  }

  Build the_build = get_object_build(the_caster);

  if (object_has_buff(the_caster, "Build Under Attack Spell")) {
    return "Can't repair while under attack (or recently under attack).";
  }

  if (is_building_under_storm(the_build) != null) {
    return "Can't repair while under attack (or recently under attack).";
  }

  if (object_health(the_caster) >= 100) {
    return "Building is not damaged.";
  }

  if (object_has_buff(the_caster, spell_type)) {
    return "";
  }

  return "";
}

// total amoount the spell will cost
int safe_callback spell_get_cast_cost (Object the_caster, String resource_name)
{
  if (resource_name == "Timonium") {
    int cost  = sf_get_repair_cost(the_caster, "Timonium", object_health(the_caster));
        cost  = cost + sf_get_repair_cost(the_caster, "Energy", object_health(the_caster));
        cost  = cost + sf_get_repair_cost(the_caster, "Wealth", object_health(the_caster));
    return cost;
  }
  
  return 0;
}

// initial cost to start the spell
int safe_callback spell_get_cast_cost_initial (Object the_caster, String resource_name)
{
  return 0;
}



int game_callback spell_cast_object (Object the_caster, Object the_target)
{
  ObjectType target_object_type = get_object_type(the_target);
  Leader the_leader = get_object_leader(the_target);

  //== The ability to toggle the repair process
  if (object_has_buff(the_caster, spell_type)) {
    remove_object_buff(the_caster, the_caster, spell_type);
    return 0;  
  }
  
  int percent_health = object_health(the_target);
  int time = (int)type_build_time_of_leader(target_object_type, the_leader);
  int percent_damage = (100 - percent_health);

  time = time * percent_damage / 100;
  if (time <= 0) {
    time = 1;
  }

  int data[];
  add(data, percent_health);    // starting health
  add(data, 0);                 // Timonium frame count
  add(data, 0);                 // Wealth frame count
  add(data, 0);                 // Energy frame count
  add(data, 0);                 // Timonium spent
  add(data, 0);                 // Wealth spent
  add(data, 0);                 // Energy spent
  add(data, 0);                 // saved health

  give_object_buff_with_data(the_caster, the_target, spell_type, time, data);
  //give_object_cooldown(the_caster, spell_type, time);
  return 1;
}



int game_callback spell_cast_location (Object the_caster, int x, int y)
{
  return spell_cast_object(the_caster, the_caster);
}



int game_callback spell_process_buff (Object the_target, Spell the_buff)
{
  if (!valid_build(the_target)) {
    return SPELL_ENDED;
  }

  Build the_build = get_object_build(the_target);
  if (is_building_under_attack(the_build)) {
    return SPELL_ENDED;
  }

  int saved_heal      = get_spell_data_data(the_buff, 7);
  int health_percent  = object_health(the_target);
  int time_left       = get_spell_remaining_time(the_buff);
  int dmg_percent     = (100 - health_percent);
  int org_percent     = get_spell_data_data(the_buff, 0);
  int health_and_saved= health_percent+saved_heal;

  if (time_left <= 1 || dmg_percent <= 0) {
    health_percent = 100;
  }
    
  if (health_percent < 100) {
    int t = 0;
    int w = 0;
    int e = 0;
    int paid = 0;
    int health_heal = 0;
    
    Leader the_leader  = get_object_leader(the_target);

    dmg_percent -= saved_heal;

    t = sf_pay_cost(the_target, the_buff, "Timonium", health_percent, org_percent, 1);
    //w = sf_pay_cost(the_target, the_buff, "Wealth",   health_percent, org_percent, 2);
    //e = sf_pay_cost(the_target, the_buff, "Energy",   health_percent, org_percent, 3);
    
    if (dmg_percent > 0) {
      int test_time = time_left / dmg_percent;
      
      if (test_time <= 0) {
        //== figure out how many percent you want to increase it
        health_heal = dmg_percent / time_left;
        if (health_heal < 1) {
            health_heal = 1;
        }
      } else {
        if ((time_left % test_time) == 0) {
          //== fix one percent
          health_heal = 1;
        }
      }
    }
    
    paid = t + w + e;
    health_heal += saved_heal;  // add in how much we've been saving
    
    //== only heal if we paid something for it otherwise save it off.
    if (paid > 0) {
      health_percent += health_heal;
      set_object_health(the_target, health_percent);
      set_spell_data_data(the_buff, 7, 0);
    } else {
      set_spell_data_data(the_buff, 7, health_heal);
    }
    
    //== ran out of a resource. stop repairing.
    int amt = get_good(the_leader, (GoodType)"Timonium");
    if ((t > 0 && amt < t) || amt < 1 ) {// ||
         //(w > 0 && get_good(the_leader, (GoodType)"Wealth") < 1) ||
         //(e > 0 && get_good(the_leader, (GoodType)"Energy") < 1)) {
      return SPELL_ENDED;
    }
    
  }
  
  //== make sure we pay for the correct amount.
  if (health_percent > 99) {
    set_object_health(the_target, 100);
    sf_pay_cost(the_target, the_buff, "Timonium", 100, org_percent, 1);
    //sf_pay_cost(the_target, the_buff, "Wealth",   100, org_percent, 2);
    //sf_pay_cost(the_target, the_buff, "Energy",   100, org_percent, 3);
    return SPELL_ENDED;
  }
  

  return SPELL_RUNNING;
}

